#!/usr/bin/perl -w 

# my %h;
# my @arr;
# while(my $line = <>){
# 	$h{$line} = 1;
# 	push @arr,$line;
# }

# map{
# 	if ($h{$_} == 1){

# 		print $_;
# 		$h{$_} = 0;
# 	}


# } @arr;


#my %h = ('google'=>'google.com',"baidu"=>'baidu.com');
#foreach my $key(keys %h){

#	print "$key=>$h{$key}\n";
#}



#my %h;
#my @arr = <STDIN>;
#foreach my $line(@arr){
#	if(exists($h{$line})){
#		next;	
#	}
#	else{

#		print $line;
#		$h{$line} = 1;
#	}
#}



#print "@arr\n";


# print "print \"";

# foreach $argument (@ARGV) {
#     for $c (split //, $argument) {
#         # translate everything but word characters to a hexadecimal escape
#         if ($c =~ /\w/) {
#             print $c;
#         } else {
#             printf "\\x%02x", ord($c);
#         }
#     }
# }

# print "\\n\";\n";

# sub print_n {
#     my ($n, $string) = @_;

#     for (1 .. $n) {
#         my $escaped_chars = escape_string($string);
#         $string = "print \"$escaped_chars\\n\"";
#     }

#     return $string;
# }

# sub escape_string {
#     my ($string) = @_;
#     my $escaped_chars = "";
#     for $c (split //, $string) {
#         # Converts double-quotes, backslash and non-printing characters except space & tab
#         # into hex escape sequences (if we escape all characters generated program size explodes)
#         if ($c =~ /[^[:print:] \t]/ || $c eq '"' || $c eq '\\') {
#             $escaped_chars .= sprintf "\\x%02x", ord($c);
#         } else {
#             $escaped_chars .= $c;
#         }
#     }
#     return $escaped_chars;
# }

# die "Usage: $0 <n> <string\n" if @ARGV != 2;
# print print_n($ARGV[0], $ARGV[1]), "\n";


#my @arr=(.1,.2,-1,-.1,2);
##foreach my $num (sort{$a <=> $b}@arr){
#	push @res ,$num;
#}

#	print @arr;


# sub mypush {
	
#  	($ref,@e) = @_;
# 	if(@e){
# 		print "OK";
# 		@$ref = (@$ref,@e);
# 	}
# 	else{
# 		@$ref= (@$ref,$_);
# 	}

# 	print "@$ref";

# }

# mypush([1,2,3]);

#my @arr = (1,2,3,5);
#$newarr[1] = \@arr;
#print @{$newarr[1]},"\n"

my $a =  1;
$new =sprintf("%02d",$a);
print $new;


